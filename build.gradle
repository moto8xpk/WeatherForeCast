plugins {
    id 'java'
    id 'io.quarkus'
    id 'jacoco'
    id 'org.sonarqube' version '6.3.1.5724'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-scheduler'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation "io.quarkus:quarkus-liquibase"
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-jackson'
    implementation 'io.quarkus:quarkus-scheduler'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    implementation 'io.quarkus:quarkus-rest-jackson'
    // Lombok dependency
    implementation 'org.projectlombok:lombok:1.18.30' // Make sure to use the latest version

    // Lombok annotation processor
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation "io.quarkus:quarkus-config-yaml"
    implementation("io.quarkus:quarkus-micrometer-registry-prometheus")
    testImplementation("io.quarkus:quarkus-junit5-mockito")
}

group 'org.openweather'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.12'
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'

}

compileTestJava {
    options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property "sonar.projectKey", "moto8xpk_WeatherForeCast"
        property "sonar.organization", "alex-tran"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL") ?: "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.binaries", "${buildDir}/classes/java/main"
    }
}